#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
vector< vector<ll> > G(10000);
bool vis[10000];

bool isbipertiteutil(int s,int e)
{
	
	queue <ll> Q;
	Q.push(s);
	vis[s] = true;
	
	while(!Q.empty())
	{
		int x = Q.front();
		Q.pop();
		cout << x << " ";
		for(int i = 0; i<G[x].size(); i++)
		{	
			if(G[x][i] == e)
				return true;
			
			if(vis[G[x][i]] == false){
				Q.push(G[x][i]);
				vis[G[x][i]] = true;
			}
		}
	}
	return false;
}

bool isbipertite(){
		int col[1000];
		memset(col, -1, sizeof col);
		
}

int main(){
	memset(vis, false, sizeof vis);
		int n, m;
		cin >> n >> m;
		for(int i = 0; i<m; i++)
		{
					int u, v;
					cin >> u >> v;
					G[u].push_back(v);
					G[v].push_back(u);
		}
		//int s, e;
		//cin >> s >> e;
		//cout << endl;
		isbipertite() ? cout << "There is a path.\n" : cout << "No path found.\n";
	return 0;
}

