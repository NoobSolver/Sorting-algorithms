#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
vector< vector<ll> > G(10000);
bool vis[10000];

void dfs(int s)
{
	stack <ll> Q;
	Q.push(s);
	vis[s] = true;
	
	while(!Q.empty())
	{
		int x = Q.top();
		Q.pop();
		cout << x << " ";
		for(int i = 0; i<(int)G[x].size(); i++)
		{
			if(vis[G[x][i]] == false){
				Q.push(G[x][i]);
				vis[G[x][i]] = true;
		}
		}
	}
}


// iterative DFS
void dfs_itr(int s){
	stack <int> st;
	st.push(s);
	while(!st.empty()){
		s = st.top();
		st.pop();
		
		if(!vis[s]){
			cout << s << " ";
			vis[s] = true;
		}
		
		//~ for(auto i = G[s].begin(); i != G[s].end(); i++){
				//~ if(!vis[*i])
					//~ st.push(*i);
		//~ }
		
	}
	
}
int main(){
	memset(vis, false, sizeof vis);
		int n, m;
		cin >> n >> m;
		for(int i = 0; i<m; i++)
		{
					int u, v;
					cin >> u >> v;
					G[u].push_back(v);
					G[v].push_back(u);
		}
		dfs(1);
	return 0;
}
